#geom_point(aes(x = Gt, y = pD_b2*adjust, colour = '#fcfdbf'), size = 5) +
xlab('\nGeneration Time') +
#scale_y_continuous(name = 'DTW Resilience Index\n',
#                  sec.axis = sec_axis(~./adjust,
#                                     name = 'DTW Projection Distance\n')) +
scale_colour_manual(values = viridis(4, option = 'A'), guide = NULL) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = 15, colour = 'black'),
axis.text.x = element_text(size = 15, colour = "black"),
axis.text.y = element_text(size = 15, colour = "black"),
strip.text.x = element_text(size = 20),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
# Time to oscillation decay
ggplot(aes(x = Gt, y = DP_b1, group = Gt), data = dat) +
# Resilience Index positive environmental change
geom_line(aes(group = 1), linewidth = 0.6, col = 'black') +
geom_point(aes(colour = as.factor(Gt)), size = 5) +
# Resilience Index negative environmental change
geom_line(aes(x = Gt, y = DP_b2, group = 1), linewidth = 0.6, col = 'black', linetype = 'dashed') +
geom_point(aes(x = Gt, y = DP_b2, colour = as.factor(Gt)), size = 5) +
xlab('\nGeneration Time') +
ylab('Point of Oscillation decay\n') +
scale_colour_manual(values = viridis(6, option = 'A'), guide = NULL) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = 15, colour = 'black'),
axis.text.x = element_text(size = 15, colour = "black"),
axis.text.y = element_text(size = 15, colour = "black"),
strip.text.x = element_text(size = 20),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
ggplot(aes(x = Gt, y = R_b1, group = Gt), data = dat) +
# Resilience Index positive environmental change
geom_line(aes(group = 1), linewidth = 0.6, col = 'black') +
geom_point(aes(colour = '#000004'), size = 5) +
# Resilience Index negative environmental change
geom_line(aes(x = Gt, y = R_b2, group = 1), linewidth = 0.6, col = 'black', linetype = 'dashed') +
geom_point(aes(x = Gt, y = R_b2, colour = '#721f81'), size = 5) +
geom_line(aes(x = Gt, y = R_stable, group = 1), linewidth = 0.6, col = 'grey', linetype = 'dashed') +
geom_point(aes(x = Gt, y = R_stable, colour = 'grey'), size = 5) +
# Projection Distance psotive environmental change
#geom_line(aes(x = Gt, y = pD_b1*adjust, group = 1), linewidth = 0.6, col = 'gray45') +
#geom_point(aes(x = Gt, y = pD_b1*adjust, colour = '#f1605d'), size = 5) +
# Projection distance negative environmental change
#geom_line(aes(x = Gt, y = pD_b2*adjust, group = 1), linewidth = 0.6, col = 'gray45', linetype = 'dashed') +
#geom_point(aes(x = Gt, y = pD_b2*adjust, colour = '#fcfdbf'), size = 5) +
xlab('\nGeneration Time') +
#scale_y_continuous(name = 'DTW Resilience Index\n',
#                  sec.axis = sec_axis(~./adjust,
#                                     name = 'DTW Projection Distance\n')) +
scale_colour_manual(values = viridis(4, option = 'A'), guide = NULL) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = 15, colour = 'black'),
axis.text.x = element_text(size = 15, colour = "black"),
axis.text.y = element_text(size = 15, colour = "black"),
strip.text.x = element_text(size = 20),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
plot(dat$R_b1~dat$R_stable)
plot(dat$R_b2~dat$R_stable)
lapply(1:length(b), function(x) { sim_ns(matU = matlist[[ii]]$mat_U, matF = matlist[[ii]]$mat_F, b = b[x], t = t, n0 = popVec[[ii]], vr.change = 'reproduction') })
# repeat simulations each time extracting resilience characteristics
NSlist <- lapply(1:n_mpm, function(ii) {
lapply(1:length(b), function(x) { sim_ns(matU = matlist[[ii]]$mat_U, matF = matlist[[ii]]$mat_F, b = b[x], t = t, n0 = popVec[[ii]], vr.change = 'reproduction') })
})
# Un-list desired outputs for a selected number of populations for plotting
n <- 3 # number of selected populations
tmpData <- data.frame(Time = rep(0:t, n*2),
b = rep(rep(b, each = t+1), n),
MPM = rep(c(1:n), each = 2*(t+1)),
# Resilience Index
R = c(sapply(NSlist, '[[', 1)['dat',c(1:n)][[c(1,3)]], sapply(NSlist, '[[', 2)['dat',c(1:n)][[c(1,3)]], # population 1
sapply(NSlist, '[[', 1)['dat',c(1:n)][[c(2,3)]], sapply(NSlist, '[[', 2)['dat',c(1:n)][[c(2,3)]], # population 2
sapply(NSlist, '[[', 1)['dat',c(1:n)][[c(3,3)]], sapply(NSlist, '[[', 2)['dat',c(1:n)][[c(3,3)]]), # population 3
# Projection Distance
pD = c(sapply(NSlist, '[[', 1)['dat',c(1:n)][[c(1,4)]], sapply(NSlist, '[[', 2)['dat',c(1:n)][[c(1,4)]],
sapply(NSlist, '[[', 1)['dat',c(1:n)][[c(2,4)]], sapply(NSlist, '[[', 2)['dat',c(1:n)][[c(2,4)]],
sapply(NSlist, '[[', 1)['dat',c(1:n)][[c(3,4)]], sapply(NSlist, '[[', 2)['dat',c(1:n)][[c(3,4)]]))
# Plot population trajectories
# Resilience Index
ggplot(data = tmpData) +
# Population 1
geom_line(aes(x = Time, y = R), data = tmpData[tmpData$b == b[1] & tmpData$MPM == 1,], col = '#FCA636', linewidth = 1) +
geom_line(aes(x = Time, y = R), data = tmpData[tmpData$b == b[2] & tmpData$MPM == 1,], col = '#FCA636', linewidth = 1, linetype = 'dashed') +
# Population 2
geom_line(aes(x = Time, y = R), data = tmpData[tmpData$b == b[1] & tmpData$MPM == 2,], col = '#0D0887', linewidth = 1) +
geom_line(aes(x = Time, y = R), data = tmpData[tmpData$b == b[2] & tmpData$MPM == 2,], col = '#0D0887', linewidth = 1, linetype = 'dashed') +
# Population 3
geom_line(aes(x = Time, y = R), data = tmpData[tmpData$b == b[1] & tmpData$MPM == 3,], col = '#DE4968', linewidth = 1) +
geom_line(aes(x = Time, y = R), data = tmpData[tmpData$b == b[2] & tmpData$MPM == 3,], col = '#DE4968', linewidth = 1, linetype = 'dashed') +
# Add trajectory comparison labels
annotate("text", x = 3, y = c( 0.605, 0.41, 0.34),
color= c('#FCA636','#0d0887','#DE4968'),
label = paste0('GT = ', round(GTvec[1:3],2)),
size= 6) +
xlab('\nTime') +
ylab('Resilience Index\n') +
scale_x_continuous(expand = c(0,1)) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = 15, colour = 'black'),
axis.text.x = element_text(size = 15, colour = "black"),
axis.text.y = element_text(size = 15, colour = "black"),
strip.text.x = element_text(size = 20),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
lapply(1:length(b), function(x) { sim_ns(matU = matlist[[ii]]$mat_U, matF = matlist[[ii]]$mat_F, b = b[x], t = t, n0 = popVec[[ii]], vr.change = 'survival') })
# repeat simulations each time extracting resilience characteristics
NSlist <- lapply(1:n_mpm, function(ii) {
lapply(1:length(b), function(x) { sim_ns(matU = matlist[[ii]]$mat_U, matF = matlist[[ii]]$mat_F, b = b[x], t = t, n0 = popVec[[ii]], vr.change = 'survival') })
})
# Un-list desired outputs for a selected number of populations for plotting
n <- 3 # number of selected populations
tmpData <- data.frame(Time = rep(0:t, n*2),
b = rep(rep(b, each = t+1), n),
MPM = rep(c(1:n), each = 2*(t+1)),
# Resilience Index
R = c(sapply(NSlist, '[[', 1)['dat',c(1:n)][[c(1,3)]], sapply(NSlist, '[[', 2)['dat',c(1:n)][[c(1,3)]], # population 1
sapply(NSlist, '[[', 1)['dat',c(1:n)][[c(2,3)]], sapply(NSlist, '[[', 2)['dat',c(1:n)][[c(2,3)]], # population 2
sapply(NSlist, '[[', 1)['dat',c(1:n)][[c(3,3)]], sapply(NSlist, '[[', 2)['dat',c(1:n)][[c(3,3)]]), # population 3
# Projection Distance
pD = c(sapply(NSlist, '[[', 1)['dat',c(1:n)][[c(1,4)]], sapply(NSlist, '[[', 2)['dat',c(1:n)][[c(1,4)]],
sapply(NSlist, '[[', 1)['dat',c(1:n)][[c(2,4)]], sapply(NSlist, '[[', 2)['dat',c(1:n)][[c(2,4)]],
sapply(NSlist, '[[', 1)['dat',c(1:n)][[c(3,4)]], sapply(NSlist, '[[', 2)['dat',c(1:n)][[c(3,4)]]))
# Plot population trajectories
# Resilience Index
ggplot(data = tmpData) +
# Population 1
geom_line(aes(x = Time, y = R), data = tmpData[tmpData$b == b[1] & tmpData$MPM == 1,], col = '#FCA636', linewidth = 1) +
geom_line(aes(x = Time, y = R), data = tmpData[tmpData$b == b[2] & tmpData$MPM == 1,], col = '#FCA636', linewidth = 1, linetype = 'dashed') +
# Population 2
geom_line(aes(x = Time, y = R), data = tmpData[tmpData$b == b[1] & tmpData$MPM == 2,], col = '#0D0887', linewidth = 1) +
geom_line(aes(x = Time, y = R), data = tmpData[tmpData$b == b[2] & tmpData$MPM == 2,], col = '#0D0887', linewidth = 1, linetype = 'dashed') +
# Population 3
geom_line(aes(x = Time, y = R), data = tmpData[tmpData$b == b[1] & tmpData$MPM == 3,], col = '#DE4968', linewidth = 1) +
geom_line(aes(x = Time, y = R), data = tmpData[tmpData$b == b[2] & tmpData$MPM == 3,], col = '#DE4968', linewidth = 1, linetype = 'dashed') +
# Add trajectory comparison labels
annotate("text", x = 3, y = c( 0.605, 0.41, 0.34),
color= c('#FCA636','#0d0887','#DE4968'),
label = paste0('GT = ', round(GTvec[1:3],2)),
size= 6) +
xlab('\nTime') +
ylab('Resilience Index\n') +
scale_x_continuous(expand = c(0,1)) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = 15, colour = 'black'),
axis.text.x = element_text(size = 15, colour = "black"),
axis.text.y = element_text(size = 15, colour = "black"),
strip.text.x = element_text(size = 20),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
lapply(1:length(b), function(x) { sim_ns(matU = matlist[[ii]]$mat_U, matF = matlist[[ii]]$mat_F, b = b[x], t = t, n0 = popVec[[ii]], vr.change = 'reproduction') })
# Un-list desired outputs for a selected number of populations for plotting
n <- 3 # number of selected populations
tmpData <- data.frame(Time = rep(0:t, n*2),
b = rep(rep(b, each = t+1), n),
MPM = rep(c(1:n), each = 2*(t+1)),
# Resilience Index
R = c(sapply(NSlist, '[[', 1)['dat',c(1:n)][[c(1,3)]], sapply(NSlist, '[[', 2)['dat',c(1:n)][[c(1,3)]], # population 1
sapply(NSlist, '[[', 1)['dat',c(1:n)][[c(2,3)]], sapply(NSlist, '[[', 2)['dat',c(1:n)][[c(2,3)]], # population 2
sapply(NSlist, '[[', 1)['dat',c(1:n)][[c(3,3)]], sapply(NSlist, '[[', 2)['dat',c(1:n)][[c(3,3)]]), # population 3
# Projection Distance
pD = c(sapply(NSlist, '[[', 1)['dat',c(1:n)][[c(1,4)]], sapply(NSlist, '[[', 2)['dat',c(1:n)][[c(1,4)]],
sapply(NSlist, '[[', 1)['dat',c(1:n)][[c(2,4)]], sapply(NSlist, '[[', 2)['dat',c(1:n)][[c(2,4)]],
sapply(NSlist, '[[', 1)['dat',c(1:n)][[c(3,4)]], sapply(NSlist, '[[', 2)['dat',c(1:n)][[c(3,4)]]))
# Plot population trajectories
# Resilience Index
ggplot(data = tmpData) +
# Population 1
geom_line(aes(x = Time, y = R), data = tmpData[tmpData$b == b[1] & tmpData$MPM == 1,], col = '#FCA636', linewidth = 1) +
geom_line(aes(x = Time, y = R), data = tmpData[tmpData$b == b[2] & tmpData$MPM == 1,], col = '#FCA636', linewidth = 1, linetype = 'dashed') +
# Population 2
geom_line(aes(x = Time, y = R), data = tmpData[tmpData$b == b[1] & tmpData$MPM == 2,], col = '#0D0887', linewidth = 1) +
geom_line(aes(x = Time, y = R), data = tmpData[tmpData$b == b[2] & tmpData$MPM == 2,], col = '#0D0887', linewidth = 1, linetype = 'dashed') +
# Population 3
geom_line(aes(x = Time, y = R), data = tmpData[tmpData$b == b[1] & tmpData$MPM == 3,], col = '#DE4968', linewidth = 1) +
geom_line(aes(x = Time, y = R), data = tmpData[tmpData$b == b[2] & tmpData$MPM == 3,], col = '#DE4968', linewidth = 1, linetype = 'dashed') +
# Add trajectory comparison labels
annotate("text", x = 3, y = c( 0.605, 0.41, 0.34),
color= c('#FCA636','#0d0887','#DE4968'),
label = paste0('GT = ', round(GTvec[1:3],2)),
size= 6) +
xlab('\nTime') +
ylab('Resilience Index\n') +
scale_x_continuous(expand = c(0,1)) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = 15, colour = 'black'),
axis.text.x = element_text(size = 15, colour = "black"),
axis.text.y = element_text(size = 15, colour = "black"),
strip.text.x = element_text(size = 20),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
# Projection distance (plot each population individually)
# Population 1
coef1 <- max(tmpData[tmpData$b == b[1] & tmpData$MPM == 1,]$pD)/max(tmpData[tmpData$b == b[2] & tmpData$MPM == 1,]$pD)
ggplot(data = tmpData) +
geom_line(aes(x = Time, y = pD), data = tmpData[tmpData$b == b[1] & tmpData$MPM == 1,], col = '#0D0887', linewidth = 1) +
geom_line(aes(x = Time, y = pD*coef1), data = tmpData[tmpData$b == b[2] & tmpData$MPM == 1,], col = '#FCA636', linewidth = 1) +
# Add trajectory comparison labels
annotate("text", x = 40, y = -5e-05,
color= '#000004',
label = paste0('GT = ',round(GTvec[1],2)),
size= 8) +
xlab('\nTime') +
scale_x_continuous(expand = c(0,1)) +
scale_y_continuous(name = 'Projection Distance (b = 0.005)\n',
sec.axis = sec_axis(~./coef1,
labels = function(x) format(x, digits = 2, scientific = TRUE),
name = 'Projection Distance (b = -0.005)\n')) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = 15, colour = 'black'),
axis.text.x = element_text(size = 15, colour = "black"),
axis.text.y = element_text(size = 15, colour = "black"),
strip.text.x = element_text(size = 20),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
# Population 2
coef2 <- max(tmpData[tmpData$b == b[1] & tmpData$MPM == 2,]$pD)/max(tmpData[tmpData$b == b[2] & tmpData$MPM == 2,]$pD)
ggplot(data = tmpData) +
geom_line(aes(x = Time, y = pD), data = tmpData[tmpData$b == b[1] & tmpData$MPM == 2,], col = '#0D0887', linewidth = 1) +
geom_line(aes(x = Time, y = pD*coef2), data = tmpData[tmpData$b == b[2] & tmpData$MPM == 2,], col = '#FCA636', linewidth = 1) +
# Add trajectory comparison labels
annotate("text", x = 42, y = 0,
color= '#000004',
label = paste0('GT = ',round(GTvec[2],2)),
size= 8) +
xlab('\nTime') +
scale_x_continuous(expand = c(0,1)) +
scale_y_continuous(name = 'Projection Distance (b = 0.005)\n',
sec.axis = sec_axis(~./coef2,
labels = function(x) format(x, digits = 2, scientific = TRUE),
name = 'Projection Distance (b = -0.005)\n')) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = 15, colour = 'black'),
axis.text.x = element_text(size = 15, colour = "black"),
axis.text.y = element_text(size = 15, colour = "black"),
strip.text.x = element_text(size = 20),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
# Population 3
coef3 <- max(tmpData[tmpData$b == b[1] & tmpData$MPM == 3,]$pD)/max(tmpData[tmpData$b == b[2] & tmpData$MPM == 3,]$pD)
ggplot(data = tmpData) +
geom_line(aes(x = Time, y = pD), data = tmpData[tmpData$b == b[1] & tmpData$MPM == 3,], col = '#0D0887', linewidth = 1) +
geom_line(aes(x = Time, y = pD), data = tmpData[tmpData$b == b[2] & tmpData$MPM == 3,], col = '#FCA636', linewidth = 1) +
# Add trajectory comparison labels
annotate("text", x = 45, y = -3e-16,
color= '#000004',
label = paste0('GT = ',round(GTvec[3],2)),
size= 8) +
xlab('\nTime') +
scale_x_continuous(expand = c(0,1)) +
scale_y_continuous(name = 'Projection Distance (b = 0.005)\n',
labels = function(x) format(x, digits = 2, scientific = TRUE),
sec.axis = sec_axis(~.,
labels = function(x) format(x, digits = 2, scientific = TRUE),
name = 'Projection Distance (b = -0.005)\n')) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = 15, colour = 'black'),
axis.text.x = element_text(size = 15, colour = "black"),
axis.text.y = element_text(size = 15, colour = "black"),
strip.text.x = element_text(size = 20),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
NSlist <- lapply(1:n_mpm, function(ii) {
lapply(1:length(b), function(x) { sim_ns(matU = matlist[[ii]]$mat_U, matF = matlist[[ii]]$mat_F, b = b[x], t = t, n0 = popVec[[ii]], vr.change = 'reproduction') })
})
# Un-list desired outputs for a selected number of populations for plotting
n <- 3 # number of selected populations
tmpData <- data.frame(Time = rep(0:t, n*2),
b = rep(rep(b, each = t+1), n),
MPM = rep(c(1:n), each = 2*(t+1)),
# Resilience Index
R = c(sapply(NSlist, '[[', 1)['dat',c(1:n)][[c(1,3)]], sapply(NSlist, '[[', 2)['dat',c(1:n)][[c(1,3)]], # population 1
sapply(NSlist, '[[', 1)['dat',c(1:n)][[c(2,3)]], sapply(NSlist, '[[', 2)['dat',c(1:n)][[c(2,3)]], # population 2
sapply(NSlist, '[[', 1)['dat',c(1:n)][[c(3,3)]], sapply(NSlist, '[[', 2)['dat',c(1:n)][[c(3,3)]]), # population 3
# Projection Distance
pD = c(sapply(NSlist, '[[', 1)['dat',c(1:n)][[c(1,4)]], sapply(NSlist, '[[', 2)['dat',c(1:n)][[c(1,4)]],
sapply(NSlist, '[[', 1)['dat',c(1:n)][[c(2,4)]], sapply(NSlist, '[[', 2)['dat',c(1:n)][[c(2,4)]],
sapply(NSlist, '[[', 1)['dat',c(1:n)][[c(3,4)]], sapply(NSlist, '[[', 2)['dat',c(1:n)][[c(3,4)]]))
# Plot population trajectories
# Resilience Index
ggplot(data = tmpData) +
# Population 1
geom_line(aes(x = Time, y = R), data = tmpData[tmpData$b == b[1] & tmpData$MPM == 1,], col = '#FCA636', linewidth = 1) +
geom_line(aes(x = Time, y = R), data = tmpData[tmpData$b == b[2] & tmpData$MPM == 1,], col = '#FCA636', linewidth = 1, linetype = 'dashed') +
# Population 2
geom_line(aes(x = Time, y = R), data = tmpData[tmpData$b == b[1] & tmpData$MPM == 2,], col = '#0D0887', linewidth = 1) +
geom_line(aes(x = Time, y = R), data = tmpData[tmpData$b == b[2] & tmpData$MPM == 2,], col = '#0D0887', linewidth = 1, linetype = 'dashed') +
# Population 3
geom_line(aes(x = Time, y = R), data = tmpData[tmpData$b == b[1] & tmpData$MPM == 3,], col = '#DE4968', linewidth = 1) +
geom_line(aes(x = Time, y = R), data = tmpData[tmpData$b == b[2] & tmpData$MPM == 3,], col = '#DE4968', linewidth = 1, linetype = 'dashed') +
# Add trajectory comparison labels
annotate("text", x = 3, y = c( 0.605, 0.41, 0.34),
color= c('#FCA636','#0d0887','#DE4968'),
label = paste0('GT = ', round(GTvec[1:3],2)),
size= 6) +
xlab('\nTime') +
ylab('Resilience Index\n') +
scale_x_continuous(expand = c(0,1)) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = 15, colour = 'black'),
axis.text.x = element_text(size = 15, colour = "black"),
axis.text.y = element_text(size = 15, colour = "black"),
strip.text.x = element_text(size = 20),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
# Projection distance (plot each population individually)
# Population 1
coef1 <- max(tmpData[tmpData$b == b[1] & tmpData$MPM == 1,]$pD)/max(tmpData[tmpData$b == b[2] & tmpData$MPM == 1,]$pD)
ggplot(data = tmpData) +
geom_line(aes(x = Time, y = pD), data = tmpData[tmpData$b == b[1] & tmpData$MPM == 1,], col = '#0D0887', linewidth = 1) +
geom_line(aes(x = Time, y = pD*coef1), data = tmpData[tmpData$b == b[2] & tmpData$MPM == 1,], col = '#FCA636', linewidth = 1) +
# Add trajectory comparison labels
annotate("text", x = 40, y = -5e-05,
color= '#000004',
label = paste0('GT = ',round(GTvec[1],2)),
size= 8) +
xlab('\nTime') +
scale_x_continuous(expand = c(0,1)) +
scale_y_continuous(name = 'Projection Distance (b = 0.005)\n',
sec.axis = sec_axis(~./coef1,
labels = function(x) format(x, digits = 2, scientific = TRUE),
name = 'Projection Distance (b = -0.005)\n')) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = 15, colour = 'black'),
axis.text.x = element_text(size = 15, colour = "black"),
axis.text.y = element_text(size = 15, colour = "black"),
strip.text.x = element_text(size = 20),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
# Population 2
coef2 <- max(tmpData[tmpData$b == b[1] & tmpData$MPM == 2,]$pD)/max(tmpData[tmpData$b == b[2] & tmpData$MPM == 2,]$pD)
ggplot(data = tmpData) +
geom_line(aes(x = Time, y = pD), data = tmpData[tmpData$b == b[1] & tmpData$MPM == 2,], col = '#0D0887', linewidth = 1) +
geom_line(aes(x = Time, y = pD*coef2), data = tmpData[tmpData$b == b[2] & tmpData$MPM == 2,], col = '#FCA636', linewidth = 1) +
# Add trajectory comparison labels
annotate("text", x = 42, y = 0,
color= '#000004',
label = paste0('GT = ',round(GTvec[2],2)),
size= 8) +
xlab('\nTime') +
scale_x_continuous(expand = c(0,1)) +
scale_y_continuous(name = 'Projection Distance (b = 0.005)\n',
sec.axis = sec_axis(~./coef2,
labels = function(x) format(x, digits = 2, scientific = TRUE),
name = 'Projection Distance (b = -0.005)\n')) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = 15, colour = 'black'),
axis.text.x = element_text(size = 15, colour = "black"),
axis.text.y = element_text(size = 15, colour = "black"),
strip.text.x = element_text(size = 20),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
# Population 3
coef3 <- max(tmpData[tmpData$b == b[1] & tmpData$MPM == 3,]$pD)/max(tmpData[tmpData$b == b[2] & tmpData$MPM == 3,]$pD)
ggplot(data = tmpData) +
geom_line(aes(x = Time, y = pD), data = tmpData[tmpData$b == b[1] & tmpData$MPM == 3,], col = '#0D0887', linewidth = 1) +
geom_line(aes(x = Time, y = pD), data = tmpData[tmpData$b == b[2] & tmpData$MPM == 3,], col = '#FCA636', linewidth = 1) +
# Add trajectory comparison labels
annotate("text", x = 45, y = -3e-16,
color= '#000004',
label = paste0('GT = ',round(GTvec[3],2)),
size= 8) +
xlab('\nTime') +
scale_x_continuous(expand = c(0,1)) +
scale_y_continuous(name = 'Projection Distance (b = 0.005)\n',
labels = function(x) format(x, digits = 2, scientific = TRUE),
sec.axis = sec_axis(~.,
labels = function(x) format(x, digits = 2, scientific = TRUE),
name = 'Projection Distance (b = -0.005)\n')) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = 15, colour = 'black'),
axis.text.x = element_text(size = 15, colour = "black"),
axis.text.y = element_text(size = 15, colour = "black"),
strip.text.x = element_text(size = 20),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
# Un-list desired outputs for plotting
dat <- data.frame(R_b1 = unlist(sapply(NSlist, '[[', 1)[1,]),
R_b2 = unlist(sapply(NSlist, '[[', 2)[1,]),
pD_b1 = unlist(sapply(NSlist, '[[', 1)[2,]),
pD_b2 = unlist(sapply(NSlist, '[[', 2)[2,]),
Gt = GTvec,
R_stable = Rvec)
plot(dat$R_b1~dat$R_stable)
plot(dat$R_b2~dat$R_stable)
ggplot(aes(x = Gt, y = R_b1, group = Gt), data = dat) +
# Resilience Index positive environmental change
geom_line(aes(group = 1), linewidth = 0.6, col = 'black') +
geom_point(aes(colour = '#000004'), size = 5) +
# Resilience Index negative environmental change
geom_line(aes(x = Gt, y = R_b2, group = 1), linewidth = 0.6, col = 'black', linetype = 'dashed') +
geom_point(aes(x = Gt, y = R_b2, colour = '#721f81'), size = 5) +
geom_line(aes(x = Gt, y = R_stable, group = 1), linewidth = 0.6, col = 'grey', linetype = 'dashed') +
geom_point(aes(x = Gt, y = R_stable, colour = 'grey'), size = 5) +
# Projection Distance psotive environmental change
#geom_line(aes(x = Gt, y = pD_b1*adjust, group = 1), linewidth = 0.6, col = 'gray45') +
#geom_point(aes(x = Gt, y = pD_b1*adjust, colour = '#f1605d'), size = 5) +
# Projection distance negative environmental change
#geom_line(aes(x = Gt, y = pD_b2*adjust, group = 1), linewidth = 0.6, col = 'gray45', linetype = 'dashed') +
#geom_point(aes(x = Gt, y = pD_b2*adjust, colour = '#fcfdbf'), size = 5) +
xlab('\nGeneration Time') +
#scale_y_continuous(name = 'DTW Resilience Index\n',
#                  sec.axis = sec_axis(~./adjust,
#                                     name = 'DTW Projection Distance\n')) +
scale_colour_manual(values = viridis(4, option = 'A'), guide = NULL) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = 15, colour = 'black'),
axis.text.x = element_text(size = 15, colour = "black"),
axis.text.y = element_text(size = 15, colour = "black"),
strip.text.x = element_text(size = 20),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
# clear working directory
rm(list = ls())
# load required files
library(terra)
install.packages('terra')
install.packages('raster')
install.packages('ggplot2')
install.packages('viridis')
install.packages('stringr')
install.packages('dplyr')
install.packages('brms')
install.packages('habtools')
install.packages('fishualise')
install.packages('fishualize')
install.packages('sf')
# clear working directory
rm(list = ls())
# load required files
library(terra)
library(raster)
library(ggplot2)
library(viridis)
library(stringr)
library(dplyr)
library(brms)
library(habtools)
library(fishualize)
library(sf)
# is this the first time running the below script? i.e. does the ecosystem typology zipped folder needed unpacking
FirstRun <- FALSE
# Set random number seed
set.seed(458967)
FilePath <- 'E:/Complexity'
# Load files
EcoTypesDF <- read.csv(paste0(FilePath, 'EcosystemComplexity.csv'))
FilePath <- 'E:/Complexity/'
# Load files
EcoTypesDF <- read.csv(paste0(FilePath, 'EcosystemComplexity.csv'))
LandUseDF <- read.csv(paste0(FilePath, 'LandUseComplexity.csv'))
View(EcoTypesDF)
ComplexRast <- 'E:/Complexity/Global Complexity/'
EcoTypes <- 'E:/Complexity/Ecotypes/'
FirstRun <- TRUE
# Extract typology maps from downloaded typology .tar file
if(FirstRun == TRUE) { untar(paste0(FilePath, "all-maps-raster-geotiff.tar.bz2"), exdir = EcoTypes) }
fileNames
# List available ecosystem type maps
fileNames <- list.files(EcoTypes, pattern = '.tif$')
fileNames <- str_extract(fileNames, '[^.]*.[^.]*') # remove unnecessary file name details
# Extract necessary file details
EcoTypesDF <- data.frame(Realm = gsub("[^a-zA-Z]", "", fileNames),
Biome = gsub(".*?([0-9]+).*", "\\1", fileNames),
EFG = sapply(strsplit(fileNames, '\\D+'),'[',3),
# Place holder for complexity details
Dmean =  rep(NA, length.out = length(fileNames)),
Dmin =  rep(NA, length.out = length(fileNames)),
Dmax = rep(NA, length.out = length(fileNames)),
Dsigma = rep(NA, length.out = length(fileNames)),
Rmean =  rep(NA, length.out = length(fileNames)),
Rmin =  rep(NA, length.out = length(fileNames)),
Rmax = rep(NA, length.out = length(fileNames)),
Rsigma = rep(NA, length.out = length(fileNames)))
# regenerate file list for extraction process
fileNames <- list.files(EcoTypes, pattern = '.tif$', full.names = TRUE)
# progress read out
print(ii)
ii = 3
# progress read out
print(ii)
# Open selected ecosystem raster (and re-project to match complexity raster)
RastSelect <- rast(fileNames[ii])
# Remove minor occurrences of selected ecosystem
RastSelect[RastSelect != 1] <- NA
# re-load required complexity rasters (multicore processing can't call the files from the global environment)
tmpD <- rast(paste0(ComplexRast, 'GlobalFractalDimension.tif'))
tmpR <- rast(paste0(ComplexRast, 'GlobalRugosity.tif'))
# Ensure rasters align
ext(RastSelect) <- ext(tmpD)
# Isolate corresponding complexity values
tmpD[is.na(RastSelect)] <- NA
RastSelect
tmpD
?project
test <- project(RastSelect, tmpD)
warnings()
res(tmpD)
